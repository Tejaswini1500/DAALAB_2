#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define MAX_VERTICES 100

// Define a structure to represent edges in the graph
struct Edge {
    int from, to, weight;
    bool included;
};

// Define a structure to represent the graph
struct Graph {
    int numVertices, numEdges;
    struct Edge edges[MAX_VERTICES * (MAX_VERTICES - 1) / 2]; // Assuming a dense graph
};

// Initialize the graph with given number of vertices
void initGraph(struct Graph *graph, int numVertices) {
    graph->numVertices = numVertices;
    graph->numEdges = 0;
}

// Add an edge to the graph
void addEdge(struct Graph *graph, int from, int to, int weight) {
    graph->edges[graph->numEdges].from = from;
    graph->edges[graph->numEdges].to = to;
    graph->edges[graph->numEdges].weight = weight;
    graph->edges[graph->numEdges].included = false;
    graph->numEdges++;
}

// Prim's algorithm implementation
void primMST(struct Graph *graph) {
    int selected[MAX_VERTICES]; // To track whether a vertex is included in MST
    int parent[MAX_VERTICES];   // To track parent of each vertex in MST
    int key[MAX_VERTICES];      // To store minimum edge weights

    // Initialize arrays
    for (int i = 0; i < graph->numVertices; i++) {
        selected[i] = 0;         // No vertices selected in MST yet
        parent[i] = -1;          // No parent assigned yet
        key[i] = INT_MAX;        // Initialize key values with infinity
    }

    // Start with the first vertex as the root
    key[0] = 0;
    parent[0] = -1;

    // Find MST by repeatedly adding the vertex with the minimum key
    for (int count = 0; count < graph->numVertices - 1; count++) {
        int u = -1;
        for (int i = 0; i < graph->numVertices; i++) {
            if (!selected[i] && (u == -1 || key[i] < key[u])) {
                u = i;
            }
        }

        selected[u] = 1; // Include vertex u in MST

        // Update key values and parent for adjacent vertices
        for (int v = 0; v < graph->numVertices; v++) {
            if (!selected[v]) {
                for (int e = 0; e < graph->numEdges; e++) {
                    if ((graph->edges[e].from == u && graph->edges[e].to == v) ||
                        (graph->edges[e].from == v && graph->edges[e].to == u)) {
                        if (graph->edges[e].weight < key[v]) {
                            parent[v] = u;
                            key[v] = graph->edges[e].weight;
                        }
                    }
                }
            }
        }
    }

    // Print the MST
    printf("Minimum Spanning Tree edges:\n");
    for (int i = 1; i < graph->numVertices; i++) {
        printf("(%d, %d) - %d\n", parent[i], i, key[i]);
    }
}

int main() {
    struct Graph graph;
    int numVertices, numEdges;

    printf("Enter the number of vertices and edges: ");
    scanf("%d %d", &numVertices, &numEdges);

    initGraph(&graph, numVertices);

    printf("Enter the edges (from, to, weight):\n");
    for (int i = 0; i < numEdges; i++) {
        int from, to, weight;
        scanf("%d %d %d", &from, &to, &weight);
        addEdge(&graph, from, to, weight);
    }

    primMST(&graph);

    return 0;
}

Enter the number of vertices and edges: 5 7
Enter the edges (from, to, weight):
0 1 2
0 3 6
1 2 3
1 3 8
1 4 5
2 4 7
3 4 9

Minimum Spanning Tree edges:
(0, 1) - 2
(1, 2) - 3
(1, 4) - 5
(0, 3) - 6
