#include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 100

struct Node {
    int value;
    struct Node* next;
};

struct Graph {
    int numNodes;
    struct Node* adjacencyList[MAX_NODES];
    int inDegree[MAX_NODES];
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

void addEdge(struct Graph* graph, int from, int to) {
    struct Node* newNode = createNode(to);
    newNode->next = graph->adjacencyList[from];
    graph->adjacencyList[from] = newNode;
    graph->inDegree[to]++;
}

void topologicalSort(struct Graph* graph, int startVertex) {
    int queue[MAX_NODES];
    int front = 0, rear = -1;
    int result[MAX_NODES];
    int resultIndex = 0;

    for (int i = 0; i < graph->numNodes; i++) {
        if (graph->inDegree[i] == 0) {
            queue[++rear] = i;
        }
    }

    while (front <= rear) {
        int node = queue[front++];
        result[resultIndex++] = node;

        struct Node* current = graph->adjacencyList[node];
        while (current != NULL) {
            graph->inDegree[current->value]--;
            if (graph->inDegree[current->value] == 0) {
                queue[++rear] = current->value;
            }
            current = current->next;
        }
    }

    printf("Topological Order starting from vertex %d: ", startVertex);
    for (int i = 0; i < resultIndex; i++) {
        printf("%d ", result[i]);
    }
    printf("\n");
}

int main() {
    struct Graph graph;
    printf("Enter the number of nodes in the graph: ");
    scanf("%d", &graph.numNodes);

    for (int i = 0; i < MAX_NODES; i++) {
        graph.adjacencyList[i] = NULL;
        graph.inDegree[i] = 0;
    }

    printf("Enter the adjacency matrix (0 or 1):\n");
    for (int i = 0; i < graph.numNodes; i++) {
        for (int j = 0; j < graph.numNodes; j++) {
            int value;
            scanf("%d", &value);
            if (value == 1) {
                addEdge(&graph, i, j);
            }
        }
    }

    int startVertex;
    printf("Enter the starting vertex: ");
    scanf("%d", &startVertex);

    topologicalSort(&graph, startVertex);

    return 0;
}

TIME COMPLEXITY:

BFS operates by visiting each vertex in the graph exactly once, exploring all vertices at the current level before moving on to the next level. Its time complexity depends on the number of vertices and edges in the graph and is typically analyzed as follows:

    In the worst case, BFS might visit every vertex and every edge in the graph. This means that the time complexity can be expressed as O(V + E), where V is the number of vertices (nodes) in the graph, and E is the number of edges.

    If the graph is represented using an adjacency matrix, the time complexity would be O(V^2) because checking for adjacent vertices for every vertex takes O(V) time, and there could be up to V vertices.

    If the graph is represented using an adjacency list, the time complexity would be O(V + E) because, in this representation, you can efficiently access the neighbors of each vertex.

ALGORITHM:
Step 1: SET STATUS = 1 (ready state) for each node in G

Step 2: Enqueue the starting node A and set its STATUS = 2 (waiting state)

Step 3: Repeat Steps 4 and 5 until QUEUE is empty

Step 4: Dequeue a node N. Process it and set its STATUS = 3 (processed state).

Step 5: Enqueue all the neighbours of N that are in the ready state (whose STATUS = 1) and set

their STATUS = 2

(waiting state)

[END OF LOOP]

Step 6: EXIT
