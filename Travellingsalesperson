#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define V 4 // Number of cities

int min(int a, int b) {
    return (a < b) ? a : b;
}

int tsp(int graph[V][V], int mask, int pos, int n, int dp[][1 << V]) {
    // If all cities have been visited, return the cost of returning to the starting city
    if (mask == (1 << n) - 1) {
        return graph[pos][0];
    }

    // If the subproblem has already been solved, return the result from the table
    if (dp[pos][mask] != -1) {
        return dp[pos][mask];
    }

    int ans = INT_MAX;

    // Try to visit unvisited cities
    for (int city = 0; city < n; city++) {
        if ((mask & (1 << city)) == 0) {
            int new_mask = mask | (1 << city);
            ans = min(ans, graph[pos][city] + tsp(graph, new_mask, city, n, dp));
        }
    }

    // Save the result in the table and return it
    return dp[pos][mask] = ans;
}

int main() {
    int graph[V][V] = {
        {0, 10, 15, 20},
        {10, 0, 35, 25},
        {15, 35, 0, 30},
        {20, 25, 30, 0}
    };

    int dp[V][1 << V];

    for (int i = 0; i < V; i++) {
        for (int j = 0; j < (1 << V); j++) {
            dp[i][j] = -1;
        }
    }

    int mask = 1; // Start with the first city visited
    int pos = 0; // Start from the first city
    int minCost = tsp(graph, mask, pos, V, dp);

    printf("Minimum cost for TSP: %d\n", minCost);

    return 0;
}
