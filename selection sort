Selection Sort Program in C using Naive Approach

In this approach, we will sort the elements of the array using a selection sort algorithm.
Expected Input and Output

1. Average case (Unsorted array): When the input array has random distribution of numbers.
For example:

If the input array is {4, 6, 1, 2, 5, 3}      
the expected output array will have data as {1, 2, 3, 4, 5, 6}

2. Best case (Sorted Array): When the input array is already sorted, in that case we have to make minimum number of swaps.
For example:


If the input array has data as {-3, 31, 66}        
then the expected output array will have data as {-3, 31, 66}

3. Worst Case (Reverse sorted array): When the array is sorted in reverse manner, in that case we have to make maximum number of swaps.
For example:

If the input array has elements as {9, 8, 6, 3, 1}
then the output array will have data as {1, 3, 6, 8, 9}

Program/Source Code

Here is source code of the C Program to sort an array of integers using Selection Sort Algorithm. The program is successfully compiled and tested using Codeblocks gnu/gcc compiler on Windows 10. The program output is also shown below.

    /*

     * C Program to Implement Selection Sort

     */

    #include <stdio.h>

    void selectionSort(int arr[], int size);

    void swap(int *a, int *b);

    /*

     * Selection sort function

     */

    void selectionSort(int arr[], int size)

    {

        int i, j;

        for (i = 0 ;  i < size;i++)

        {

            for (j = i ; j < size; j++)

            {

                if (arr[i] > arr[j])

                    swap(&arr[i], &arr[j]);

            }

        }

    }

     

    /* Function to swap two variables */

    void swap(int *a, int *b)

    {

        int temp;

        temp = *a;

        *a = *b;

        *b = temp;

    }

     

    /*

     * Main Function

     */

    int main()

    {

        int array[10], i, size;

        printf("How many numbers you want to sort:  ");

        scanf("%d", &size);

        printf("\nEnter %d numbers\t", size);

        printf("\n");

        for (i = 0; i < size; i++)

            scanf("%d", &array[i]);

        selectionSort(array, size);

        printf("\nSorted array is ");

        for (i = 0; i < size;i++)

            printf(" %d ", array[i]);

        return 0;

    }

Program Explanation

1. The algorithm divides the input list into two parts: the sublist of items already sorted, which is built up from left to right at the front (left) of the list, and the sublist of items remaining to be sorted that occupy the rest of the list.
2. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list.
3. The algorithm proceeds by finding the smallest (or largest, depending on sorting order) element in the unsorted sublist, exchanging it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right.

Time Complexity: O(N2).
The time complexity of the above program for sorting an array is O(N2).

Space Complexity: O(1).
In this program, we are not initializing an array or other data types that take a lot of storage. Therefore, our space complexity is constant, i.e., O(1).
Runtime Test Cases

Testcase 1: In this case, we are entering all unsorted elements, so the input array is {4, 6, 1, 2, 5, 3}.

How many numbers you want to sort: 6
 
Enter 6 numbers
4 6 1 2 5 3
 
Sorted array is  1  2  3  4  5  6

Testcase 2: In this case, we are entering all sorted elements, so the input array is {-3, 31, 66}.

How many numbers you want to sort:  3
 
Enter 3 numbers
-3 31 66
 
Sorted array is  -3  31  66

Testcase 3: In this case, all sorted elements are entered in reverse order, so the input array is {9, 8, 6, 3, 1}.

How many numbers you want to sort:  5
 
Enter 5 numbers
9 8 6 3 1
 
Sorted array is  1  3  6  8  9
