#include <stdio.h>
#include <string.h>

#define MAX_CHAR 256

// Function to precompute the bad character heuristic table
void precomputeBadCharHeuristic(char* pattern, int patternLength, int badCharHeuristic[MAX_CHAR]) {
    for (int i = 0; i < MAX_CHAR; i++) {
        badCharHeuristic[i] = -1; // Initialize all entries to -1
    }

    for (int i = 0; i < patternLength; i++) {
        badCharHeuristic[(int)pattern[i]] = i;
    }
}

// Function to perform string searching using Horspool's algorithm
void horspoolSearch(char* text, char* pattern) {
    int textLength = strlen(text);
    int patternLength = strlen(pattern);

    int badCharHeuristic[MAX_CHAR];
    precomputeBadCharHeuristic(pattern, patternLength, badCharHeuristic);

    int shift = 0;
    while (shift <= textLength - patternLength) {
        int j = patternLength - 1;

        while (j >= 0 && pattern[j] == text[shift + j]) {
            j--;
        }

        if (j < 0) {
            printf("Pattern found at index %d\n", shift);
            shift += (shift + patternLength < textLength) ? patternLength - badCharHeuristic[(int)text[shift + patternLength]] : 1;
        } else {
            shift += (j - badCharHeuristic[(int)text[shift + j]]) > 1 ? j - badCharHeuristic[(int)text[shift + j]] : 1;
        }
    }
}

int main() {
    char text[1000];
    char pattern[100];

    printf("Enter the text: ");
    scanf("%s", text);

    printf("Enter the pattern to search for: ");
    scanf("%s", pattern);

    horspoolSearch(text, pattern);

    return 0;
}
